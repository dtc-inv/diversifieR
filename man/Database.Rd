% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Database.R
\name{Database}
\alias{Database}
\title{Get historical holdings from black diamond over multiple months}
\description{
Database connects to various data providers, e.g., FactSet, Black Diamond,
  SEC EDGAR, etc, to pull data and organize in tables files (arrow, parquet)
  in AWS S3.
}
\details{
Database Object


All fields are optional, except the api keys must be either entered
as a list through the api_keys parameter or a file path to load the
api keys via api_file. The tables are data.frames or tibbles stored
as arrow or parquet files in S3, accessed through the bucket
S3FileSystem.


If msl is left as NULL the msl stored in the Database Object as will
be written. If a data.frame or tibble is entered then that will
table will be saved to S3. Note there is only one msl, whatever is
saved will overwrite the table in S3.


Holdings each month between the start and end dates will be downloaded
and saved to AWS.

The portfolio (or mutual fund, CTF, SMA, ETF, etc) will need to
  be in the MSL. For existing files, new rows will
  be  added for holdings as of the new date. For SEC sources the most
  recent filings will be pulled. For Black Diamond the date is part of
  the API to pull holdings as of a specific date. If left NULL date will
  default to the last trading day.


The SMA holdings in CTF accounts are updated bi-monthly. As a
work around the SMAs are read as their own accounts seperately to
get a more recent estimate. If update_bd is set to FALSE the latest
values will be used (last time they were updated). Set to TRUE to
force and update of the underlying SMAs to the last trading day.

CAREFUL with add_to_existing. Set to TRUE to continue time-series
of holdings. If you need to overwrite file with just new holdings, set
to FALSE.


IMPORTANT: needs to be run locally, api keys for black diamond are
only stored in DTC servers, not AWS.


The portfolios to be updated are filtered from the MSL that have
holdings sources of BD or SEC. CTFs are updated with a seperate
process to work around the bi-monthly SMA update within the CTF.


  Large amounts of ids need to broken up, some factset API requests only
  allow 50 ids at a time. Request ids first look for ISIN, then CUSIP,
  SEDOL, LEI, and Identifier in order. The function returns a list with
  ids and iter for global prices and fi_ids and fi_iter for the formula
  API (mutual fund returns). The iter is the sequence of large amounts
  of ids to be broken up into smaller pieces. For small numbers, e.g.,
  10 ids will contain and iter of c(1, 10).


  Will add new returns to existing time-series stored in S3. New
  time-series that are not in the old file will have NAs for older returns
  depending on the history available and the days_back input. For
  existing time-series, any overlap in the new and old returns will be
  overwritten with the new returns.


  The default for dates is to pull the most recent trading days return.
  The routine is run overnight to add a new return to the existing
  table of returns. To add new returns specify ids and set the date_start
  farther back (~5 years) to create a history.

ids are added to the existing list, duplicates are checked and
removed


The files are organized by metric. For example the P/E file will
contain a time-series of P/Es for each company. This function reads all
the metrics and combines the latest values for each company into one
table.


Currently set up for P/E, P/B, P/FCF, DY, ROE, and Mkt Cap. The data
are organized by the metric. The P/E table will contain a time-series
of the P/E for each stock.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{msl}}{table: master security list}

\item{\code{api_keys}}{optional list containing api_keys}

\item{\code{bucket}}{`S3FileSystem` object from `arrow`}

\item{\code{macro}}{list with tables for R3000 and ACWI model from Piper Sandler}

\item{\code{ret}}{list with daily and monthly return tables}

\item{\code{fina}}{table with latest financial metrics for companies}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Database-new}{\code{Database$new()}}
\item \href{#method-Database-write_msl}{\code{Database$write_msl()}}
\item \href{#method-Database-read_msl}{\code{Database$read_msl()}}
\item \href{#method-Database-read_msl_xl}{\code{Database$read_msl_xl()}}
\item \href{#method-Database-read_macro}{\code{Database$read_macro()}}
\item \href{#method-Database-check_bucket}{\code{Database$check_bucket()}}
\item \href{#method-Database-check_msl}{\code{Database$check_msl()}}
\item \href{#method-Database-check_api_keys}{\code{Database$check_api_keys()}}
\item \href{#method-Database-back_fill_bd_holdings}{\code{Database$back_fill_bd_holdings()}}
\item \href{#method-Database-update_holding}{\code{Database$update_holding()}}
\item \href{#method-Database-update_all_ctf_holdings}{\code{Database$update_all_ctf_holdings()}}
\item \href{#method-Database-update_ctf_holdings}{\code{Database$update_ctf_holdings()}}
\item \href{#method-Database-update_sec}{\code{Database$update_sec()}}
\item \href{#method-Database-update_bd}{\code{Database$update_bd()}}
\item \href{#method-Database-update_all_bd_and_sec}{\code{Database$update_all_bd_and_sec()}}
\item \href{#method-Database-read_all_ret}{\code{Database$read_all_ret()}}
\item \href{#method-Database-filter_fs_ids}{\code{Database$filter_fs_ids()}}
\item \href{#method-Database-update_fs_mf_ret_daily}{\code{Database$update_fs_mf_ret_daily()}}
\item \href{#method-Database-update_fs_exchange_ret_daily}{\code{Database$update_fs_exchange_ret_daily()}}
\item \href{#method-Database-update_ctf_ret_monthly}{\code{Database$update_ctf_ret_monthly()}}
\item \href{#method-Database-update_ctf_ret_daily}{\code{Database$update_ctf_ret_daily()}}
\item \href{#method-Database-download_factset_sector_country}{\code{Database$download_factset_sector_country()}}
\item \href{#method-Database-update_fs_fina_most_recent}{\code{Database$update_fs_fina_most_recent()}}
\item \href{#method-Database-update_fs_fina_quarterly}{\code{Database$update_fs_fina_quarterly()}}
\item \href{#method-Database-update_macro}{\code{Database$update_macro()}}
\item \href{#method-Database-clone}{\code{Database$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-new"></a>}}
\if{latex}{\out{\hypertarget{method-Database-new}{}}}
\subsection{Method \code{new()}}{
Create a Database
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$new(
  msl = NULL,
  bucket = NULL,
  api_keys = NULL,
  api_file = "N:/Investment Team/DATABASES/MDB/Keys/api_keys.RData"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msl}}{table: master security list}

\item{\code{bucket}}{`S3FileSystem` object from `arrow`}

\item{\code{api_keys}}{list of api_keys}

\item{\code{api_file}}{`.RData` file to load api_key list}

\item{\code{geo}}{table: country number and geography}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-write_msl"></a>}}
\if{latex}{\out{\hypertarget{method-Database-write_msl}{}}}
\subsection{Method \code{write_msl()}}{
save master security list in S3
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$write_msl(msl = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msl}}{master security list}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-read_msl"></a>}}
\if{latex}{\out{\hypertarget{method-Database-read_msl}{}}}
\subsection{Method \code{read_msl()}}{
Read msl from S3
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$read_msl()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-read_msl_xl"></a>}}
\if{latex}{\out{\hypertarget{method-Database-read_msl_xl}{}}}
\subsection{Method \code{read_msl_xl()}}{
Read msl from Excel
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$read_msl_xl(path = "N:/Investment Team/DATABASES/MDB/Tables/msl.xlsx")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{file path where workbook is stored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-read_macro"></a>}}
\if{latex}{\out{\hypertarget{method-Database-read_macro}{}}}
\subsection{Method \code{read_macro()}}{
Read macro workbooks from S3
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$read_macro()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-check_bucket"></a>}}
\if{latex}{\out{\hypertarget{method-Database-check_bucket}{}}}
\subsection{Method \code{check_bucket()}}{
Check if bucket is not NULL
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$check_bucket()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-check_msl"></a>}}
\if{latex}{\out{\hypertarget{method-Database-check_msl}{}}}
\subsection{Method \code{check_msl()}}{
Check if MSL is loaded and has unique DTCNames (key id).
  Will try from S3 if NULL.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$check_msl()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-check_api_keys"></a>}}
\if{latex}{\out{\hypertarget{method-Database-check_api_keys}{}}}
\subsection{Method \code{check_api_keys()}}{
Check if api_keys are properly structured as named list. Will need
to update if more keys are added.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$check_api_keys()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-back_fill_bd_holdings"></a>}}
\if{latex}{\out{\hypertarget{method-Database-back_fill_bd_holdings}{}}}
\subsection{Method \code{back_fill_bd_holdings()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$back_fill_bd_holdings(dtc_name, date_start, date_end)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dtc_name}}{DTCName in MSL of portfolio / account}

\item{\code{date_start}}{first (oldest) date to start holdings download}

\item{\code{date_end}}{most recent date to end holdings download period}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_holding"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_holding}{}}}
\subsection{Method \code{update_holding()}}{
Pull holdings of portfolio, current sources include Black Diamon,
SEC EDGAR, and Excel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_holding(
  dtc_name,
  as_of = NULL,
  user_email = NULL,
  xl_df = NULL,
  return_df = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dtc_name}}{key id, DTCName column in master security list}

\item{\code{as_of}}{optional date for when the holdings are pulled as of, see
details}

\item{\code{user_email}}{default is Alejandro's, SEC requires email in API}

\item{\code{xl_df}}{if updating from Excel, data.frame to pass through}

\item{\code{return_df}}{data will be saved in S3, if set to TRUE a data.frame
will also be returned}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_all_ctf_holdings"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_all_ctf_holdings}{}}}
\subsection{Method \code{update_all_ctf_holdings()}}{
Update All CTF holdings from Black Diamond
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_all_ctf_holdings(update_bd = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{update_bd}}{boolean to update underlying holdings first.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_ctf_holdings"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_ctf_holdings}{}}}
\subsection{Method \code{update_ctf_holdings()}}{
Update a CTF holding
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_ctf_holdings(dtc_name, add_to_existing = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dtc_name}}{DTCName in msl (key id)}

\item{\code{add_to_existing}}{boolean to add new holdings to old holdings as
a time-series of holdings. If set to FALSE the file with old holdings
will be overwritten and only new holdings will exist.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_sec"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_sec}{}}}
\subsection{Method \code{update_sec()}}{
Helper function to update holdings from SEC EDGAR filings
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_sec(obs, user_email)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obs}}{row of msl with portfolio meta data}

\item{\code{user_email}}{SEC requires an email address when scraping data}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame of holdings, does not save to S3
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_bd"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_bd}{}}}
\subsection{Method \code{update_bd()}}{
Helper function to update holdings from Black Diamond
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_bd(obs, api_keys, as_of)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obs}}{row of msl with portfolio meta data}

\item{\code{api_keys}}{description}

\item{\code{as_of}}{desired date of when to pull holdings from}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
data.frame of holdings, does not save to S3
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_all_bd_and_sec"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_all_bd_and_sec}{}}}
\subsection{Method \code{update_all_bd_and_sec()}}{
Update all portfolios holdings (except CTFs, see
  update_ctf_holdings) from Black Diamond and SEC
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_all_bd_and_sec(user_email = NULL, as_of = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{user_email}}{will default to Alejandro's if left NULL, SEC requires}

\item{\code{as_of}}{for Black Diamond date for when to pull as of, will
default to last trading day if letf NULL}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
saves updated holdings in S3
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-read_all_ret"></a>}}
\if{latex}{\out{\hypertarget{method-Database-read_all_ret}{}}}
\subsection{Method \code{read_all_ret()}}{
Read in all retuns to populate ret field
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$read_all_ret(all_stock = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
db$ret will now be populated with a list containing two xts
  objects: $d daily returns and $m monthly returns
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-filter_fs_ids"></a>}}
\if{latex}{\out{\hypertarget{method-Database-filter_fs_ids}{}}}
\subsection{Method \code{filter_fs_ids()}}{
Get factset request ids from the msl
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$filter_fs_ids(max_iter_by = 50)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{max_iter_by}}{number to sequence large number of ids}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_fs_mf_ret_daily"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_fs_mf_ret_daily}{}}}
\subsection{Method \code{update_fs_mf_ret_daily()}}{
Update mutual fund returns with Factset formula API
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_fs_mf_ret_daily(ids = NULL, days_back = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{days_back}}{integer for how many trading days to pull history for,
default is zero to pull only latest trading day}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_fs_exchange_ret_daily"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_fs_exchange_ret_daily}{}}}
\subsection{Method \code{update_fs_exchange_ret_daily()}}{
Update returns for all investments traded on an exchange
(e.g., stocks, ETFs) with Factset Global Prices API
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_fs_exchange_ret_daily(
  ids = NULL,
  date_start = NULL,
  date_end = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ids}}{optional, can pass through string of ids, otherwise will
pull from the master security list}

\item{\code{date_start}}{optional string 'YYYY-MM-DD' to represent the first
date in the time-series}

\item{\code{date_end}}{optional string 'YYYY-MM-DD' to represent the last date
in the time-series.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_ctf_ret_monthly"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_ctf_ret_monthly}{}}}
\subsection{Method \code{update_ctf_ret_monthly()}}{
Update monthly CTF and SMA returns
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_ctf_ret_monthly(t_minus = 1, add_row = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{t_minus}}{numeric for how many months to update}

\item{\code{add_row}}{TRUE = add row to existing file of returns, FALSE =
overwrite and save only new returns}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_ctf_ret_daily"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_ctf_ret_daily}{}}}
\subsection{Method \code{update_ctf_ret_daily()}}{
Update CTF and SMA Returns daily
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_ctf_ret_daily(t_minus = 1, add_row = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{t_minus}}{numeric for how many days back to go}

\item{\code{add_row}}{TRUE = add row to existing file of returns, FALSE =
overwrite and save only new returns}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-download_factset_sector_country"></a>}}
\if{latex}{\out{\hypertarget{method-Database-download_factset_sector_country}{}}}
\subsection{Method \code{download_factset_sector_country()}}{
Download factset sectors or country of risk
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$download_factset_sector_country(xformula, ids = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{xformula}}{currently supports factset sector and country of risk}

\item{\code{ids}}{character string of ids, if left blank will download for all
stocks in MSL}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
saves data.frame into s3
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_fs_fina_most_recent"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_fs_fina_most_recent}{}}}
\subsection{Method \code{update_fs_fina_most_recent()}}{
Run after each quarter to add most recent fundamental data point
(e.g., P/E, ROE) to S3 table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_fs_fina_most_recent()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_fs_fina_quarterly"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_fs_fina_quarterly}{}}}
\subsection{Method \code{update_fs_fina_quarterly()}}{
Run after each quarter to add most recent fundamental data point
(e.g., P/E, ROE) to S3 table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_fs_fina_quarterly(
  ids = NULL,
  yrs_back = 1,
  dtype = c("PE", "PB", "PFCF", "DY", "ROE", "MCAP"),
  add_row = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{yrs_back}}{integer for how many years back to pull most recent data}

\item{\code{dtype}}{which metric to download, current options are PE, PB, PFCF,
DY, ROE, and MCAP}

\item{\code{add_row}}{boolean to add row to existing dataset. If set to FALSE
the metric table will be over-written with new data.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-update_macro"></a>}}
\if{latex}{\out{\hypertarget{method-Database-update_macro}{}}}
\subsection{Method \code{update_macro()}}{
Read Macro Select Workbooks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$update_macro(
  fpath = NULL,
  acwi = "D_MACRO_SELECT_GLOBAL",
  r3 = "D_MACRO_SELECT_R",
  fct_name = c("A", "B", "C", "D", "E")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fpath}}{optional string to specify file path, default is
'N:/Investment Team/DATABASES/MDB/Tables/'}

\item{\code{acwi}}{optional string to specify ACWI workbook name, default is
'D_MACRO_SELECT_GLOBAL'}

\item{\code{r3}}{optional string to specify Russell indexes workbook name,
default is 'D_MACRO_SELECT_R'}

\item{\code{fct_name}}{string vector to specify factor names, length must match
the number of factors}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
tables are saved in S3
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Database-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Database-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Database$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
